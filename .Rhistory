) +
geom_point() +
facet_wrap(~Species)
iris %>%
ggplot(
pivot_longer(
names_to = c("Part", ".value"),
names_sep = "\\.",
cols = -Species
),
aes(Width, Length, color = Part)
) +
geom_point() +
facet_wrap(~Species)
ggplot(
iris %>%
pivot_longer(
names_to = c("Part", ".value"),
names_sep = "\\.",
cols = -Species
),
aes(Width, Length, color = Part)
) +
geom_point() +
facet_wrap(~Species)
iris %>%
pivot_longer(
names_to = c("Part", ".value"),
names_sep = "\\.",
cols = -Species
) %>%
ggplot(aes(Width, Length, color = Part)) +
geom_point() +
facet_wrap(~Species)
```{r setup}
library(tidyverse)
# knitr options
knitr::opts_chunk$set(echo = TRUE)
## Re-indent these lines
c(
"foo",
"bar",
"goo",
"gah"
)
## Re-indent these lines
c(
"foo",
"bar",
"goo",
"gah"
)
## Re-indent these lines
c(
"foo",
"bar",
"goo",
"gah"
)
echo = FALSE
include = FALSE
## Re-indent these lines
c(
"foo",
"bar",
"goo",
"gah"
)
# knitr options
knitr::opts_chunk$set(echo = TRUE)
## TODO: Assign the appropriate vector to vec_q1
?c()
vec_q1
## TODO: Assign the appropriate vector to vec_q1
?c()
vec_q1 <- c(1, 2, 3)
## NOTE: No need to change this
assertthat::assert_that(length(vec_q1) == 3)
assertthat::assert_that(mean(vec_q1) == 2)
print("Nice!")
## NOTE: No need to change this
assertthat::assert_that(length(vec_q2) == 4)
## TODO: Assign the appropriate vector to vec_q2
vec_q2 <- c(vec_q1, 4)
## NOTE: No need to change this
assertthat::assert_that(length(vec_q2) == 4)
assertthat::assert_that(mean(vec_q2) == 2.5)
print("Well done!")
# knitr options
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
## No need to edit; uncomment and run
"a" + 1
str_c("a", "1")
TRUE == 1
FALSE == 0
nihongo <- "私は大学生です" # "I'm a college student"
nihongo
## TASK: Describe what went wrong here
## Set our airport
airport <- "BOS"
## Check our airport value
airport == ATL
## TASK: Describe what went wrong here
## Set our airport
airport <- "BOS"
## Check our airport value
airport == "ATL"
## TASK: Describe what went wrong here
## Set our airport
airport <- "BOS"
## Check our airport value
airport == ATL
v_string <- c("00", "45", "90")
v_integer <- NA_real_
## NOTE: No need to change this!
assertthat::assert_that(
assertthat::are_equal(
v_integer,
c(0L, 45L, 90L)
)
)
v_string <- c("00", "45", "90")
v_integer <- as.integer(v_string)
## NOTE: No need to change this!
assertthat::assert_that(
assertthat::are_equal(
v_integer,
c(0L, 45L, 90L)
)
)
print("Great job!")
```{r setup}
library(tidyverse)
## NOTE: No need to edit; just run and inspect
diamonds %>%
slice_sample(n = 1000) %>%
ggplot(aes(carat, price)) +
geom_point() +
scale_x_log10() +
scale_y_log10() +
theme_minimal() +
labs(x = "", y = "")
## NOTE: No need to edit; just run and inspect
diamonds %>%
slice_sample(n = 1000) %>%
ggplot(aes(carat, price)) +
geom_point() +
scale_x_log10() +
scale_y_log10() +
theme_minimal() +
labs(x = "", y = "")
library(tidyverse)
# knitr options
knitr::opts_chunk$set(echo = TRUE)
?diamonds
glimpse(diamonds)
## NOTE: No need to edit; run and inspect
ggplot(            # 1. Starting a ggplot
data = diamonds  # 2. Dataset to visualize
) +                # 3. Adding elements to the plot
geom_point(      # 4. Geometry
mapping = aes( # 5. `Aes`thetic mapping
x = carat,   # 5.1. Mapping the `x` variable
y = depth    # 5.2. Mapping the `y` variable
)
)
## TODO: Complete this code
ggplot(diamonds)
+                # 3. Adding elements to the plot
geom_point(      # 4. Geometry
mapping = aes( # 5. `Aes`thetic mapping
x = price,   # 5.1. Mapping the `x` variable
y = carat    # 5.2. Mapping the `y` variable
)
)
## TODO: Complete this code
ggplot(diamonds)
+
geom_point(
mapping = aes(
x = price,
y = carat
)
)
## TODO: Complete this code
ggplot(diamonds) +
geom_point(
mapping = aes(
x = price,
y = carat
)
)
## TODO: Complete this code
ggplot(diamonds) +
geom_point(
mapping = aes(
x = carat,
y = price
)
)
## NOTE: This is some more advanced code we'll learn to write later
diamonds %>%
group_by(carat) %>%
summarize(
price = mean(price),
n = n()
) %>%
# This is the focus of this code: Note the
# additional `linewidth` argument to aes()
ggplot() +
geom_line(aes(x = carat, y = price, linewidth = n))
?GEOM_POINT
?geom_point
## TODO: Complete this code
ggplot(diamonds)
geom_point(aes(x = carat, y = price, color = cut))
## TODO: Complete this code
ggplot(diamonds) +
geom_point(aes(x = carat, y = price, color = cut))
## TASK: Plot `price` vs `carat` below
ggplot(diamonds) +
geom_point(mapping = aes(x = carat, y = price))
## TASK: Plot `price`, `carat`, and `cut` below
ggplot(diamonds) +
geom_point(aes(x = carat, y = price, color = cut))
## TASK: Plot `price`, `carat`, and `cut` below
ggplot(diamonds) +
geom_point(aes(x = price, y = carat, color = cut))
## TASK: Plot `price`, `carat`, and `cut` below
ggplot(diamonds) +
geom_point(aes(x = carat, y = price, color = cut))
## TASK: Plot `price`, `carat`, and `cut` below
ggplot(diamonds) +
geom_point(aes(x = carat, y = price, color = cut))
ggplot(diamonds) +
geom_point(aes(x = cut, y = price)
## TASK: Plot `price`, `carat`, and `cut` below
ggplot(diamonds) +
geom_point(aes(x = carat, y = price, color = cut))
ggplot(diamonds) +
geom_point(aes(x = cut, y = price))
## TASK: Plot `price`, `carat`, and `cut` below
ggplot(diamonds) +
geom_point(aes(x = carat, y = price, color = cut))
library(tidyverse)
df_titanic <- as_tibble(Titanic)
## TASK: Perform a `glimpse` of df_titanic
glimpse(df_titanic)
## NOTE: No need to edit! We'll cover how to
## do this calculation in a later exercise.
df_titanic %>% summarize(total = sum(n))
## NOTE: No need to edit! We'll cover how to
## do this calculation in a later exercise.
sum(n)
## NOTE: No need to edit! We'll cover how to
## do this calculation in a later exercise.
df_titanic %>% summarize(total = sum(n))
# knitr options
knitr::opts_chunk$set(echo = TRUE)
```{r library}
library(tidyverse)
# knitr options
knitr::opts_chunk$set(echo = TRUE)
diamonds %>%
ggplot(aes(cut)) +
geom_bar()
diamonds %>%
ggplot(aes(cut, price)) +
geom_point()
diamonds %>%
ggplot(aes(cut, price)) +
geom_boxplot()
diamonds %>%
ggplot(aes(cut, carat)) +
geom_boxplot()
library(tidyverse)
library(nycflights13) # For `flights` data
flights %>% glimpse()
## NOTE: No need to edit
flights %>%
select(flight, carrier, dep_time)
flights %>%
select(starts_with("dep_"))
## df_q1 <- TODO: Your code goes here!
df_q1
## df_q1 <- TODO: Your code goes here!
flights %>%
select(ends_with("_time"))
print("Nice!")
flights %>%
select(year, month, day, sched_dep_time, everything())
df_q2
df_q2 <- flights %>% select(everything()) # TODO: Modify to move columns to the front
df_q2
df_q2 <- flights %>% select(everything()) # TODO: Modify to move columns to the front
df_q2 <- flights %>% select(dest, origin, carrier, everything()) # TODO: Modify to move columns to the
df_q2
## NOTE: No need to change this
assertthat::assert_that(
assertthat::are_equal(names(df_q2)[1:5], c("dest", "origin", "carrier", "year", "month"))
)
print("Well done!")
flights %>%
filter(month == 2)
## NOTE: Uncomment and run to see the error
# flights %>%
#   filter(month = 2)
## NOTE: Uncomment and run to see the error
flights %>%
filter(month = 2)
## NOTE: Uncomment and run to see the error
flights %>%
filter(month = 2)
## NOTE: Uncomment and run to see the error
flights %>%
filter(month == 2)
?flights
## TASK:
df_q3 <-
flights %>%
filter(between(arr_delay, 0, 10) |between(arr_delay, -10,0)
)
df_q3
## NOTE: No need to change this!
assertthat::assert_that(
df_q3 %>%
summarize(diff = max(arr_time - sched_arr_time)) %>%
pull(diff) %>%
.[[1]] <= 10
)
## TASK:
df_q3 <-
flights %>%
filter(between(arr_delay, 0.1, 10) |between(arr_delay, -10,-0.1)
)
df_q3
## NOTE: No need to change this!
assertthat::assert_that(
df_q3 %>%
summarize(diff = max(arr_time - sched_arr_time)) %>%
pull(diff) %>%
.[[1]] <= 10
)
## TASK:
df_q3 <-
flights %>%
filter(between(arr_delay, 0.1, 10) |between(arr_delay, -10,-0.1)
)
df_q3
## TASK:
df_q3 <-
flights %>%
filter(between(arr_delay, 0.1, 10)
)
df_q3
## TASK:
df_q3 <-
flights %>%
select(arr_delay, arr_time, sched_arr_time, everything())
filter(between(arr_delay, 0.1, 10)
)
## TASK:
df_q3 <-
flights %>%
select(arr_delay, arr_time, sched_arr_time, everything()) %>%
filter(between(arr_delay, 0.1, 10)
)
df_q3
## TASK:
df_q3 <-
flights %>%
select(arr_delay, arr_time, sched_arr_time, everything()) %>%
filter(between(arr_delay, 0.1, 10) | between(arr_delay, 10, -0.1)
)
df_q3
## TASK:
df_q3 <-
flights %>%
select(arr_delay, arr_time, sched_arr_time, everything()) %>%
filter(between(arr_delay, 0.1, 9.9) | between(arr_delay, 9.9, -0.1)
)
df_q3
## TASK:
df_q3 <-
flights %>%
select(arr_delay, arr_time, sched_arr_time, everything()) %>%
filter(between(arr_delay, 0.1, 9.9) | between(arr_delay, -9.9, -0.1)
)
df_q3
## TASK:
df_q3 <-
flights %>%
select(arr_delay, arr_time, sched_arr_time, everything()) %>%
filter(between(arr_delay, 0.1, 9.9)
)
df_q3
## TASK:
df_q3 <-
flights %>%
select(arr_delay, arr_time, sched_arr_time, everything()) %>%
filter(between(arr_time-sched_arr_time, 0.1, 9.9) )
df_q3
## TASK:
df_q3 <-
flights %>%
select(arr_delay, arr_time, sched_arr_time, everything()) %>%
filter(between(arr_time - sched_arr_time, 0.1, 9.9) )
df_q3
## NOTE: No need to change this!
assertthat::assert_that(
df_q3 %>%
summarize(diff = max(arr_time - sched_arr_time)) %>%
pull(diff) %>%
.[[1]] <= 10
)
assertthat::assert_that(
df_q3 %>%
summarize(diff = max(arr_time - sched_arr_time)) %>%
pull(diff) %>%
.[[1]] > 0
)
print("Nice!")
flights %>% filter(dest = "LAX") # Uncomment and run to see error
flights %>% filter(dest = LAX) # Uncomment and run to see error
BOS <- "LGA"
flights %>% filter(dest == BOS)
BOS <- "LGA"
flights %>% filter(dest == BOS)
flights %>% filter(dest = "LAX") # Uncomment and run to see error
flights %>% filter(dest == "LAX") # Uncomment and run to see error
## df_q6a <- dest is JFK, LGA, or EWR
df_q6a <-
flights %>%
filter(dest == "JFK" | "LGA" | "EWR")
## df_q6a <- dest is JFK, LGA, or EWR
df_q6a <-
flights %>%
filter(dest == "JFK" | dest == "LGA" | dest =="EWR")
## df_q6b <- origin is JFK, LGA, or EWR
## NOTE: No need to change this!
assertthat::assert_that(
df_q6a %>%
mutate(flag = dest %in% c("JFK", "LGA", "EWR")) %>%
summarize(flag = all(flag)) %>%
pull(flag)
)
assertthat::assert_that(
df_q6b %>%
mutate(flag = origin %in% c("JFK", "LGA", "EWR")) %>%
summarize(flag = all(flag)) %>%
pull(flag)
)
## df_q6a <- dest is JFK, LGA, or EWR
df_q6a <-
flights %>%
filter(dest == "JFK" | dest == "LGA" | dest == "EWR")
## df_q6b <- origin is JFK, LGA, or EWR
dfq6b <-
flights %>%
filter(origin == "JFK" | origin == "LGA" | origin == "EWR")
## NOTE: No need to change this!
assertthat::assert_that(
df_q6a %>%
mutate(flag = dest %in% c("JFK", "LGA", "EWR")) %>%
summarize(flag = all(flag)) %>%
pull(flag)
)
assertthat::assert_that(
df_q6b %>%
mutate(flag = origin %in% c("JFK", "LGA", "EWR")) %>%
summarize(flag = all(flag)) %>%
pull(flag)
)
## df_q6a <- dest is JFK, LGA, or EWR
df_q6a <-
flights %>%
filter(dest == "JFK" | dest == "LGA" | dest == "EWR")
## df_q6b <- origin is JFK, LGA, or EWR
df_q6b <-
flights %>%
filter(origin == "JFK" | origin == "LGA" | origin == "EWR")
## NOTE: No need to change this!
assertthat::assert_that(
df_q6a %>%
mutate(flag = dest %in% c("JFK", "LGA", "EWR")) %>%
summarize(flag = all(flag)) %>%
pull(flag)
)
assertthat::assert_that(
df_q6b %>%
mutate(flag = origin %in% c("JFK", "LGA", "EWR")) %>%
summarize(flag = all(flag)) %>%
pull(flag)
)
print("Nice!")
## df_q6a <- dest is JFK, LGA, or EWR
df_q6a <-
flights %>%
filter(dest == "JFK" | dest == "LGA" | dest == "EWR")
df_q6a
## df_q6b <- origin is JFK, LGA, or EWR
df_q6b <-
flights %>%
filter(origin == "JFK" | origin == "LGA" | origin == "EWR")
df_q6b
## NOTE: No need to edit
flights %>%
arrange(dep_delay)
## NOTE: No need to edit
flights %>%
arrange(desc(dep_delay))
