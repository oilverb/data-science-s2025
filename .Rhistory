# Libraries
library(tidyverse)
library(googlesheets4)
url <- "https://docs.google.com/spreadsheets/d/1av_SXn4j0-4Rk0mQFik3LLr-uf0YdA06i3ugE6n-Zdo/edit?usp=sharing"
# Parameters
LIGHTSPEED_VACUUM    <- 299792.458 # Exact speed of light in a vacuum (km / s)
LIGHTSPEED_MICHELSON <- 299944.00  # Michelson's speed estimate (km / s)
LIGHTSPEED_PM        <- 51         # Michelson error estimate (km / s)
## Note: No need to edit this chunk!
gs4_deauth()
ss <- gs4_get(url)
df_michelson <-
read_sheet(ss) %>%
select(Date, Distinctness, Temp, Velocity) %>%
mutate(Distinctness = as_factor(Distinctness))
df_michelson %>% glimpse()
library(tidyverse)
flights %>% glimpse()
```{r setup}
library(tidyverse)
library(nycflights13) # For `flights` data
flights %>% glimpse()
## NOTE: No need to edit
flights %>%
select(flight, carrier, dep_time)
flights %>%
select(starts_with("dep_"))
## df_q1 <- TODO: Your code goes here!
flights %>%
select(ends_with("_time"))
## NOTE: No need to change this
assertthat::assert_that(
all(names(df_q1) %>% str_detect(., "_time$"))
)
df_q1 <-
flights %>%
select(ends_with("_time"))
## NOTE: No need to change this
assertthat::assert_that(
all(names(df_q1) %>% str_detect(., "_time$"))
)
print("Nice!")
flights %>%
select(year, month, day, sched_dep_time, everything())
df_q2 <- flights %>% select(everything()) # TODO: Modify to move columns to the front
df_q2 <- flights %>% select(dest, origin, carrier, everything()) # TODO: Modify to move columns to the
df_q2
## NOTE: No need to change this
assertthat::assert_that(
assertthat::are_equal(names(df_q2)[1:5], c("dest", "origin", "carrier", "year", "month"))
)
print("Well done!")
flights %>%
filter(month == 2)
## NOTE: Uncomment and run to see the error
flights %>%
filter(month = 2)
## TASK:
df_q3 <-
flights %>%
select(arr_delay, arr_time, sched_arr_time, everything()) %>%
filter(between(arr_time - sched_arr_time, 0.1, 9.9) )
df_q3
flights %>% filter(dest == "LAX") # Uncomment and run to see error
BOS <- "LGA"
flights %>% filter(dest == BOS)
BOS <- "LGA"
flights %>% filter(dest == "BOS")
BOS <- "LGA"
flights %>% filter(dest == "BOS")
## NOTE: No need to change this!
assertthat::assert_that(
df_q6a %>%
mutate(flag = dest %in% c("JFK", "LGA", "EWR")) %>%
summarize(flag = all(flag)) %>%
pull(flag)
)
## df_q6a <- dest is JFK, LGA, or EWR
df_q6a <-
flights %>%
filter(dest == "JFK" | dest == "LGA" | dest == "EWR")
df_q6a
## df_q6b <- origin is JFK, LGA, or EWR
df_q6b <-
flights %>%
filter(origin == "JFK" | origin == "LGA" | origin == "EWR")
df_q6b
## NOTE: No need to change this!
assertthat::assert_that(
df_q6a %>%
mutate(flag = dest %in% c("JFK", "LGA", "EWR")) %>%
summarize(flag = all(flag)) %>%
pull(flag)
)
assertthat::assert_that(
df_q6b %>%
mutate(flag = origin %in% c("JFK", "LGA", "EWR")) %>%
summarize(flag = all(flag)) %>%
pull(flag)
)
print("Nice!")
## NOTE: No need to edit
flights %>%
arrange(dep_delay)
## NOTE: No need to edit
flights %>%
arrange(desc(dep_delay))
## NOTE: No need to edit
flights %>%
arrange(desc(carrier)) %>%
select(carrier, everything())
## df_q7 <- TODO: Your code here!
df_q7
## df_q7 <- TODO: Your code here!
df_q7 <-
flights %>%
arrange(desc(air_time)) %>%
select(air_time, dest, everything())
## df_q7 <- TODO: Your code here!
df_q7 <-
flights %>%
arrange(desc(air_time)) %>%
select(air_time, dest, everything())
## NOTE: No need to change this!
assertthat::assert_that(
assertthat::are_equal(
df_q7 %>% head(1) %>% pull(air_time),
flights %>% pull(air_time) %>% max(na.rm = TRUE)
)
)
assertthat::assert_that(
assertthat::are_equal(
df_q7 %>% filter(!is.na(air_time)) %>% tail(1) %>% pull(air_time),
flights %>% pull(air_time) %>% min(na.rm = TRUE)
)
)
assertthat::assert_that(
assertthat::are_equal(
names(df_q7)[1:2],
c("air_time", "dest")
)
)
print("Great job!")
# knitr options
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
## NOTE: Do not edit this
tibble(a = c(1, 2, 2, 3, 3, 3)) %>%
ggplot(aes(x = a)) +
geom_bar()
## NOTE: Do not edit this
tibble(
a = c(1, 2, 3),
b = c(3, 1, 2)
) %>%
ggplot(aes(x = a, y = b)) +
geom_col()
## NOTE: Do not edit this
tibble(
a = c(1, 2, 2),
b = c(3, 1, 2),
c = c("a", "a", "b")
) %>%
ggplot(aes(x = a, y = b, fill = c)) +
geom_col()
# knitr options
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
## NOTE: Do not edit this
tibble(a = c(1, 2, 2, 3, 3, 3)) %>%
ggplot(aes(x = a)) +
geom_bar()
## NOTE: Do not edit this
tibble(
a = c(1, 2, 3),
b = c(3, 1, 2)
) %>%
ggplot(aes(x = a, y = b)) +
geom_col()
## NOTE: Do not edit this
tibble(a = c(1, 2, 2, 3, 3, 3)) %>%
count(a) %>% # Count adds the column `n` of counts
ggplot(aes(x = a, y = n)) +
geom_col()
## NOTE: Do not edit this
tibble(
a = c(1, 2, 2), # Note that our x aesthetic (a) has repeat values
b = c(3, 1, 2)  # Hence, we have two different b values for a == 2
) %>%
ggplot(aes(x = a, y = b)) +
geom_col()
df_report %>%
gt()
library(tidyverse)
library(gt)
# Schedule details
filename_dep <- "./schedule_wd.csv"
# Data directory
dir_data <- "../exercises_sequenced"
# Find all the assignment files
df_files_all <-
tibble(filename = list.files(dir_data, full.names = TRUE)) %>%
mutate(name = str_remove(filename, "\\.\\./exercises_sequenced/")) %>%
select(name)
df_files_all
# Load the schedule data
df_schedule <- read_csv(filename_dep)
df_schedule
# Wrangle the exercise sequence
df_seq <-
df_schedule %>%
arrange(day) %>%
mutate(
name = str_c(
"d",
str_pad(day, width = 2, side = "left", pad = "0"),
"-",
name,
"-assignment.Rmd"
)
) %>%
group_by(challenge) %>%
mutate(
challenge = if_else(
row_number() == max(row_number()),
as.character(challenge),
""
)
) %>%
ungroup()
df_seq
# Final join
df_report <-
df_seq %>%
left_join(
.,
df_files_all %>%
mutate(done = 0),
by = "name"
) %>%
mutate(done = if_else(is.na(done), "✅", "✖️️")) %>%
select(day, challenge, done, name)
df_report
df_report %>%
gt()
## NOTE: Run this chunk for an illustration
mpg %>% filter(cty == 20)
mpg %>%
ggplot(aes(x = cty, y = hwy)) +
geom_col(position = "dodge")
mpg %>%
ggplot(aes(trans)) +
geom_bar()
## TODO: Run this code without changing, describe your observations on the data
mpg %>%
ggplot(aes(x = class, fill = class)) +
geom_bar()
## TODO: Run this code without changing, describe your observations on the data
mpg %>%
ggplot(aes(class, fill = drv)) +
geom_bar()
mpg %>%
ggplot(aes(x = manufacturer, fill = class), position = "dodge") +
geom_bar() +
theme(axis.text.x = element_text(angle = 270, vjust = 0.5, hjust = 0))
## NOTE: Do not edit this
tibble(
a = c(1, 2, 1, 2),
b = c(3, 1, 2, 2),
c = c("a", "a", "b", "b")
) %>%
ggplot(aes(x = a, y = b)) +
geom_col() +
facet_wrap(~c)
## NOTE: Do not edit this
# Horizontal facets
tibble(
a = c(1, 2, 1, 2),
b = c(3, 1, 2, 2),
c = c("a", "a", "b", "b")
) %>%
ggplot(aes(x = a, y = b)) +
geom_col() +
facet_grid(~c)
# Vertical facets
tibble(
a = c(1, 2, 1, 2),
b = c(3, 1, 2, 2),
c = c("a", "a", "b", "b")
) %>%
ggplot(aes(x = a, y = b)) +
geom_col() +
facet_grid(c ~ .)
# Two-way faceting
tibble(
a = c(1, 2, 1, 2, 1, 2),
b = c(3, 1, 2, 2, 3, 1),
c = c("a", "a", "b", "b", "a", "a"),
d = c("a", "a", "a", "a", "b", "b")
) %>%
ggplot(aes(x = a, y = b)) +
geom_col() +
facet_grid(c ~ d)
mpg %>%
ggplot(aes(x = cyl)) +
geom_bar() +
facet_grid(~ manufacturer)
mpg %>%
ggplot(aes(trans)) +
ggplot(aes(x = a, y = n)) +
geom_bar()
mpg %>%
ggplot(aes(trans)) +
geom_bar()
## NOTE: Do not edit this
tibble(
a = c(1, 2, 2),
b = c(3, 1, 2),
c = c("a", "a", "b")
) %>%
ggplot(aes(x = a, y = b, fill = c)) +
geom_col(position = "dodge")
## NOTE: Do not edit this
tibble(
a = c(1, 2, 1, 2),
b = c(3, 1, 2, 2),
c = c("a", "a", "b", "b")
) %>%
ggplot(aes(x = a, y = b)) +
geom_col() +
facet_wrap(~c)
## NOTE: Do not edit this
# Horizontal facets
tibble(
a = c(1, 2, 1, 2),
b = c(3, 1, 2, 2),
c = c("a", "a", "b", "b")
) %>%
ggplot(aes(x = a, y = b)) +
geom_col() +
facet_grid(~c)
# Vertical facets
tibble(
a = c(1, 2, 1, 2),
b = c(3, 1, 2, 2),
c = c("a", "a", "b", "b")
) %>%
ggplot(aes(x = a, y = b)) +
geom_col() +
facet_grid(c ~ .)
# Two-way faceting
tibble(
a = c(1, 2, 1, 2, 1, 2),
b = c(3, 1, 2, 2, 3, 1),
c = c("a", "a", "b", "b", "a", "a"),
d = c("a", "a", "a", "a", "b", "b")
) %>%
ggplot(aes(x = a, y = b)) +
geom_col() +
facet_grid(c ~ d)
## NOTE: Do not edit this
# Horizontal facets
tibble(
a = c(1, 2, 1, 2),
b = c(3, 1, 2, 2),
c = c("a", "a", "b", "b")
) %>%
ggplot(aes(x = a, y = b)) +
geom_col() +
facet_grid(~c)
# Vertical facets
tibble(
a = c(1, 2, 1, 2),
b = c(3, 1, 2, 2),
c = c("a", "a", "b", "b")
) %>%
ggplot(aes(x = a, y = b)) +
geom_col() +
facet_grid(c ~ .)
# Two-way faceting
tibble(
a = c(1, 2, 1, 2, 1, 2),
b = c(3, 1, 2, 2, 3, 1),
c = c("a", "a", "b", "b", "a", "a"),
d = c("a", "a", "a", "a", "b", "b")
) %>%
ggplot(aes(x = a, y = b)) +
geom_col() +
facet_grid(c ~ d)
facet_wrap(~ manufacturer)
## NOTE: Do not edit this
# Horizontal facets
tibble(
a = c(1, 2, 1, 2),
b = c(3, 1, 2, 2),
c = c("a", "a", "b", "b")
) %>%
ggplot(aes(x = a, y = b)) +
geom_col() +
facet_grid(~c)
# Vertical facets
tibble(
a = c(1, 2, 1, 2),
b = c(3, 1, 2, 2),
c = c("a", "a", "b", "b")
) %>%
ggplot(aes(x = a, y = b)) +
geom_col() +
facet_grid(c ~ .)
# Two-way faceting
tibble(
a = c(1, 2, 1, 2, 1, 2),
b = c(3, 1, 2, 2, 3, 1),
c = c("a", "a", "b", "b", "a", "a"),
d = c("a", "a", "a", "a", "b", "b")
) %>%
ggplot(aes(x = a, y = b)) +
geom_col() +
facet_grid(c ~ d)
# knitr options
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
## Version 1
filter(diamonds, cut == "Ideal")
## Version 2
diamonds %>% filter(cut == "Ideal")
## NOTE: No need to edit
diamonds %>%
summarize(price_mean = mean(price))
## NOTE: No need to edit
diamonds %>%
summarize(
price_min = min(price),
price_mean = mean(price),
price_max = max(price),
)
df_q2
df_q2 <-
diamonds %>%
summarize(n_ideal = sum(cut == "Ideal"))
df_q2
## NOTE: No need to change this!
assertthat::assert_that(
assertthat::are_equal(
df_q2 %>% pull(n_ideal),
21551
)
)
print("Great job!")
## NOTE: No need to edit
diamonds %>%
group_by(cut) %>%
summarize(n = n()) # Count the rows in each group of `cut`
## NOTE: This does the same as the previous code chunk
diamonds %>%
count(cut)
diamonds %>%
## group_by(color, clarity) %>%
summarize(price_mean = mean(price))
## NOTE: No need to edit
diamonds %>%
mutate(`mass(g)` = carat / 5) %>%
select(`mass(g)`, everything())
## TODO: Compute the `cov_depth` and `cov_diff` and assign the result to df_q4
df_q4 <-
diamonds
df_q4
## TODO: Compute the `cov_depth` and `cov_diff` and assign the result to df_q4
df_q4 <-
diamonds %>%
mutate(
depth_computed = 100 * 2 * z / (x + y),
diff = depth - depth_computed
) %>%
summarize(
depth_mean = mean(depth, na.rm = TRUE),
depth_sd = sd(depth, na.rm = TRUE),
cov_depth = depth_sd / depth_mean,
diff_mean = mean(diff, na.rm = TRUE),
diff_sd = sd(diff, na.rm = TRUE),
cov_diff = diff_sd / diff_mean,
c_diff = IQR(diff, na.rm = TRUE) / median(diff, na.rm = TRUE)
)
df_q4
## NOTE: No need to change this!
assertthat::assert_that(abs(df_q4 %>% pull(cov_depth) - 0.02320057) < 1e-3)
assertthat::assert_that(abs(df_q4 %>% pull(cov_diff) - 497.5585) < 1e-3)
print("Nice!")
## TODO: Assign result to df_q5
df_q5 <-
diamonds %>%
group_by(cut) %>%
summarize(
price_mean = mean(price),
price_sd = sd(price),
price_cov = price_sd / price_mean
)
df_q5
## NOTE: No need to change this!
assertthat::assert_that(
assertthat::are_equal(
df_q5 %>%
select(cut, price_cov) %>%
mutate(price_cov = round(price_cov, digits = 3)),
tibble(
cut = c("Fair", "Good", "Very Good", "Premium", "Ideal"),
price_cov = c(0.817, 0.937, 0.988, 0.949, 1.101)
) %>%
mutate(cut = fct_inorder(cut, ordered = TRUE))
)
)
print("Excellent!")
