df_q5 %>%
ggplot(aes(VelocityVacuum, color = Day)) +
geom_density(size = 2)  +
geom_vline(xintercept = LIGHTSPEED_VACUUM, linetype = "dashed") +
labs(title = 'Density of Velocity by Day of Week')
df_q5 %>%
ggplot(aes(x = Day, y = VelocityVacuum, fill = Day)) +
geom_boxplot() +
geom_hline(yintercept = LIGHTSPEED_VACUUM, linetype = "dashed") +
labs(title = 'Frequency of Velocity by Day of Week')
df_q5 <-
df_q2 %>%
mutate(
Day = wday(Date, label = TRUE)
)
#plot qty and Distinctness vs day of week
df_q5 %>%
ggplot(aes(Day, fill = Distinctness)) +
geom_bar() +
labs(title = 'Quantity and Dsitinctiveness by Day of Week')
#plot frequency vs day of week
df_q5 %>%
ggplot(aes(VelocityVacuum, color = Day)) +
geom_freqpoly(bins = 10) +
geom_vline(xintercept = LIGHTSPEED_VACUUM, linetype = "dashed") +
labs(title = 'Frequency of Velocity by Day of Week')
#plot density vs day of week
df_q5 %>%
ggplot(aes(VelocityVacuum, color = Day)) +
geom_density(size = 1.5)  +
geom_vline(xintercept = LIGHTSPEED_VACUUM, linetype = "dashed") +
labs(title = 'Density of Velocity by Day of Week')
df_q5 %>%
ggplot(aes(x = Day, y = VelocityVacuum, fill = Day)) +
geom_boxplot() +
geom_hline(yintercept = LIGHTSPEED_VACUUM, linetype = "dashed") +
labs(title = 'Frequency of Velocity by Day of Week')
df_q5 %>%
ggplot(aes(VelocityVacuum, color = Distinctness)) +
geom_density(size = 1.25) +
labs(title = 'Lightspeed Density vs Distinctness')
df_q5 %>%
ggplot(aes(VelocityVacuum, color = Distinctness)) +
geom_density(size = 1.25) +
geom_vline(xintercept = LIGHTSPEED_VACUUM, linetype = "dashed") +
labs(title = 'Lightspeed Density vs Distinctness')
df_q5 %>%
ggplot(aes(VelocityVacuum, color = Distinctness)) +
geom_freqpoly(bins = 10, size = 1.25) +
geom_vline(xintercept = LIGHTSPEED_VACUUM, linetype = "dashed") +
labs(title = 'Frequency of Velocity by Day of Week')
df_q5 %>%
ggplot(aes( x = Temp, y =VelocityVacuum)) +
geom_smooth() +
labs(title = "Trends of Velocity in Vacuum vs. Temperature", x = "Temperature", y = "Velocity of Light")
df_q5 %>%
ggplot(aes( x = Temp, y =VelocityVacuum)) +
geom_smooth() +
labs(title = "Trends of Velocity in Vacuum vs. Temperature")
df_q5 %>%
ggplot(aes( x = Temp, y =VelocityVacuum)) +
geom_smooth() +
labs(title = "Velocity in Vacuum vs. Temperature")
df_q5 %>%
ggplot(aes( x = Temp, y =VelocityVacuum)) +
geom_smooth() +
labs(title = "Velocity in Vacuum vs. Temperature")
df_q5 %>%
ggplot(aes( x = Temp, y =Velocity)) +
geom_smooth() +
labs(title = "Measured Velocityvs. Temperature")
df_q5 %>%
ggplot(aes( x = Temp, y =VelocityVacuum)) +
geom_smooth() +
geom_hline(yintercept = LIGHTSPEED_VACUUM, linetype = "dashed") +
labs(title = "Velocity in Vacuum vs. Temperature")
df_q5 %>%
ggplot(aes( x = Temp, y =Velocity)) +
geom_smooth() +
geom_hline(yintercept = LIGHTSPEED_VACUUM, linetype = "dashed") +
labs(title = "Measured Velocity vs. Temperature")
df_q5 %>%
ggplot(aes( x = Temp, y =VelocityVacuum)) +
geom_scatter() +
geom_hline(yintercept = LIGHTSPEED_VACUUM, linetype = "dashed") +
labs(title = "Velocity in Vacuum vs. Temperature")
df_q5 %>%
ggplot(aes( x = Temp, y =VelocityVacuum)) +
geom_smooth() +
geom_hline(yintercept = LIGHTSPEED_VACUUM, linetype = "dashed") +
labs(title = "Velocity in Vacuum vs. Temperature")
df_q5 %>%
ggplot(aes( x = Temp, y =Velocity)) +
geom_smooth() +
geom_hline(yintercept = LIGHTSPEED_VACUUM, linetype = "dashed") +
labs(title = "Measured Velocity vs. Temperature")
df_q5 %>%
pivot_longer(cols = c(VelocityVacuum, Velocity),
names_to = "VelocityType",
values_to = "VelocityValue") %>%
ggplot(aes(x = Temp, y = VelocityValue, color = VelocityType)) +
geom_smooth() +
geom_hline(yintercept = LIGHTSPEED_VACUUM, linetype = "dashed", size = 1) +
facet_wrap(~ VelocityType, scales = "free_y") +
labs(title = "Velocity vs. Temperature",
y = "Velocity",
x = "Temperature")
df_q5 %>%
ggplot(aes( x = Temp, y =VelocityVacuum)) +
geom_smooth() +
geom_hline(yintercept = LIGHTSPEED_VACUUM, linetype = "dashed") +
labs(title = "Velocity in Vacuum vs. Temperature")
df_q5 %>%
ggplot(aes( x = Temp, y =Velocity)) +
geom_smooth() +
geom_hline(yintercept = LIGHTSPEED_VACUUM, linetype = "dashed") +
labs(title = "Measured Velocity vs. Temperature")
df_q5 %>%
pivot_longer(cols = c(VelocityVacuum, Velocity),
names_to = "VelocityType",
values_to = "VelocityValue") %>%
ggplot(aes(x = Temp, y = VelocityValue, color = VelocityType)) +
geom_smooth() +
geom_hline(yintercept = LIGHTSPEED_VACUUM, linetype = "dashed", size = 1) +
labs(title = "Velocity vs. Temperature",
y = "Velocity",
x = "Temperature",
color = "Velocity Type")
df_q5 %>%
ggplot(aes( x = Temp, y =VelocityVacuum)) +
geom_smooth() +
geom_hline(yintercept = LIGHTSPEED_VACUUM, linetype = "dashed") +
labs(title = "Velocity in Vacuum vs. Temperature")
df_q5 %>%
ggplot(aes( x = Temp, y =Velocity)) +
geom_smooth() +
geom_hline(yintercept = LIGHTSPEED_VACUUM, linetype = "dashed") +
labs(title = "Measured Velocity vs. Temperature")
df_q5 %>%
ggplot(aes( x = Temp, y =VelocityVacuum)) +
geom_point() +
geom_hline(yintercept = LIGHTSPEED_VACUUM, linetype = "dashed") +
labs(title = "Velocity in Vacuum vs. Temperature")
df_q5 %>%
ggplot(aes( x = Temp, y =Velocity)) +
geom_point() +
geom_hline(yintercept = LIGHTSPEED_VACUUM, linetype = "dashed") +
labs(title = "Measured Velocity vs. Temperature")
df_q5 %>%
ggplot(aes( x = Temp, y =VelocityVacuum)) +
geom_point() +
geom_smooth() +
geom_hline(yintercept = LIGHTSPEED_VACUUM, linetype = "dashed") +
labs(title = "Velocity in Vacuum vs. Temperature")
df_q5 %>%
ggplot(aes( x = Temp, y =Velocity)) +
geom_point() +
geom_hline(yintercept = LIGHTSPEED_VACUUM, linetype = "dashed") +
labs(title = "Measured Velocity vs. Temperature")
df_q5 %>%
ggplot(aes( x = Temp, y =VelocityVacuum)) +
geom_point() +
geom_smooth() +
geom_hline(yintercept = LIGHTSPEED_VACUUM, linetype = "dashed") +
labs(title = "Velocity in Vacuum vs. Temperature")
df_q5 %>%
ggplot(aes( x = Temp, y =Velocity)) +
geom_smooth() +
geom_point() +
geom_hline(yintercept = LIGHTSPEED_VACUUM, linetype = "dashed") +
labs(title = "Measured Velocity vs. Temperature")
library(tidyverse)
## NOTE: If you extracted all challenges to the same location,
## you shouldn't have to change this filename
filename <- "./data/stang.csv"
## Load the data
df_stang <- read_csv(filename)
df_stang
# knitr options
knitr::opts_chunk$set(echo = TRUE)
df_q3_res <-
df_q3 %>%
pivot_wider(
names_from = id,
names_prefix = "X-",
values_from = value
)
# knitr options
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
## NOTE: No need to edit; execute
cases <- tribble(
~Country, ~`2011`, ~`2012`, ~`2013`,
"FR",    7000,    6900,    7000,
"DE",    5800,    6000,    6200,
"US",   15000,   14000,   13000
)
cases
## TODO: Modify with your multiple choice number answer
q1_answer <- 2
## NOTE: The following will test your answer
if (((q1_answer + 56) %% 3 == 1) & (q1_answer > 0)) {
"Correct!"
} else {
"Incorrect!"
}
## NOTE: No need to edit; execute
alloys <- tribble(
~thick, ~E_00, ~mu_00, ~E_45, ~mu_45, ~rep,
0.022, 10600,  0.321, 10700,  0.329,    1,
0.022, 10600,  0.323, 10500,  0.331,    2,
0.032, 10400,  0.329, 10400,  0.318,    1,
0.032, 10300,  0.319, 10500,  0.326,    2
)
alloys
## TODO: Modify with your multiple choice number answer
q2_answer <- 1
## NOTE: The following will test your answer
if (((q2_answer + 38) %% 3 == 2) & (q2_answer > 0)) {
"Correct!"
} else {
"Incorrect!"
}
## NOTE: No need to edit; execute
cases %>%
pivot_longer(
names_to = "Year",
values_to = "n",
cols = c(`2011`, `2012`, `2013`)
)
## NOTE: No need to edit; execute
cases %>%
pivot_longer(
names_to = "Year",
values_to = "n",
c(`2011`, `2012`, `2013`)
) %>%
summarize(Year = mean(Year))
## NOTE: No need to edit; execute
cases %>%
pivot_longer(
names_to = "Year",
values_to = "n",
c(`2011`, `2012`, `2013`)
) %>%
mutate(Year = as.integer(Year))
## NOTE: No need to edit; execute
ansc <-
tribble(
~`x-1`, ~`x-2`, ~`y-1`, ~`y-2`,
10,     10,   8.04,   9.14,
8,      8,   6.95,   8.14,
13,     13,   7.58,   8.74,
9,      9,   8.81,   8.77,
11,     11,   8.33,   9.26,
14,     14,   9.96,   8.10,
6,      6,   7.24,   6.13,
4,      4,   4.26,   3.10,
12,     12,  10.84,   9.13,
7,      7,   4.82,   7.26,
5,      5,   5.68,   4.74
)
ansc
## NOTE: No need to edit; execute
ansc %>%
pivot_longer(
names_to = c(".value", "set"),
names_sep = "-",
cols = everything()
)
## NOTE: No need to edit; execute
alloys %>%
pivot_longer(
names_to = c("var", "angle"),
names_sep = "_",
values_to = "val",
cols = c(-thick, -rep) # Use all columns in the pivot, *EXCEPT* these two
)
## NOTE: No need to edit; execute
alloys %>%
pivot_longer(
names_to = c("var", "angle"),
names_sep = "_",
values_to = "val",
starts_with("E") | starts_with("mu")
) %>%
pivot_wider(
names_from = var, # Cell entries to turn into new column names
values_from = val # Values to associate with the new column(s)
)
## NOTE: No need to edit; this is setup for the exercises
df_base <-
tribble(
~`X-0`, ~`X-1`, ~key,
1,      9,  "A",
2,      8,  "B",
3,      7,  "C"
)
## NOTE: No need to edit; this is setup for the exercise
df_q3 <-
df_base %>%
pivot_longer(
names_to = "id",
names_pattern = "(\\d)",
names_transform = list(id = as.integer),
values_to = "value",
cols = -key
)
df_q3
## NOTE: No need to edit; this is setup for the exercise
df_q3 <-
df_base %>%
pivot_longer(
names_to = "id",
names_pattern = "(\\d)",
names_transform = list(id = as.integer),
values_to = "value",
cols = -key
)
df_q3
df_q3_res <-
df_q3 %>%
pivot_wider(
names_from = id,
names_prefix = "X-",
values_from = value
)
df_q3_res
all.equal(
df_base,
df_q3_res %>% select(names(df_base))
) # Checks equality; returns TRUE if equal
## NOTE: No need to edit; this is setup for the exercise
df_q4 <-
df_base %>%
pivot_wider(
names_from = key,
values_from = `X-0`
)
df_q4
df_q4_res <-
df_q4 %>%
df_base %>%
pivot_wider(
names_from = key,
values_from = `X-0`
)
## NOTE: No need to edit; this is setup for the exercise
df_q4 <-
df_base %>%
pivot_wider(
names_from = key,
values_from = `X-0`
)
df_q4
df_q4_res <-
df_q4 %>%
df_base %>%
pivot_wider(
names_from = key,
values_from = `X-0`
)
df_q4_res <-
pivot_longer(
names_to = "key",
values_to = "X-0",
values_drop_na = TRUE,
cols = c(A, B, C)
)
df_q4_res <-
df_q4 %>%
pivot_longer(
names_to = "key",
values_to = "X-0",
values_drop_na = TRUE,
cols = c(A, B, C)
)
df_q4_res
all.equal(
df_base,
df_q4_res %>% select(names(df_base))
) # Checks equality; returns TRUE if equal
## NOTE: No need to edit; this is setup for the exercise
df_q5 <-
df_base %>%
pivot_wider(
names_from = key,
values_from = -key
)
df_q5
df_q5_res <-
df_q5 %>%
pivot_longer(
names_to = c(".value", "key"),
names_sep = "_",
cols = everything()
)
df_q5_res
all.equal(
df_base,
df_q5_res %>% select(names(df_base))
) # Checks equality; returns TRUE if equal
library(tidyverse)
library(gt)
# Schedule details
filename_dep <- "./schedule_wd.csv"
# Data directory
dir_data <- "../exercises_sequenced"
# Find all the assignment files
df_files_all <-
tibble(filename = list.files(dir_data, full.names = TRUE)) %>%
mutate(name = str_remove(filename, "\\.\\./exercises_sequenced/")) %>%
select(name)
df_files_all
# Load the schedule data
df_schedule <- read_csv(filename_dep)
df_schedule
# Wrangle the exercise sequence
df_seq <-
df_schedule %>%
arrange(day) %>%
mutate(
name = str_c(
"d",
str_pad(day, width = 2, side = "left", pad = "0"),
"-",
name,
"-assignment.Rmd"
)
) %>%
group_by(challenge) %>%
mutate(
challenge = if_else(
row_number() == max(row_number()),
as.character(challenge),
""
)
) %>%
ungroup()
df_seq
# Final join
df_report <-
df_seq %>%
left_join(
.,
df_files_all %>%
mutate(done = 0),
by = "name"
) %>%
mutate(done = if_else(is.na(done), "✅", "✖️️")) %>%
select(day, challenge, done, name)
df_report
df_report %>%
gt()
```{r setup}
library(tidyverse)
## NOTE: If you extracted all challenges to the same location,
## you shouldn't have to change this filename
filename <- "./data/stang.csv"
## Load the data
df_stang <- read_csv(filename)
df_stang
## TASK: Tidy `df_stang`
df_stang_long <-
df_stang
df_stang_long
## NOTE: No need to change this
## Names
assertthat::assert_that(
setequal(
df_stang_long %>% names,
c("thick", "alloy", "angle", "E", "nu")
)
)
# knitr options
knitr::opts_chunk$set(echo = TRUE)
## NOTE: No need to modify
# Density plot
mpg %>%
ggplot(aes(displ, color = class)) +
geom_density()
## NOTE: No need to modify
# Boxplot
mpg %>%
mutate(class = fct_reorder(class, displ)) %>%
ggplot(aes(x = class, y = displ)) +
geom_boxplot()
## NOTE: No need to edit
mpg %>%
filter(class == "midsize") %>%
ggplot(aes(x = class, y = displ)) +
geom_hline(
data = . %>%
# Compute the quartiles
summarize(
displ_025 = quantile(displ, 0.25),
displ_050 = quantile(displ, 0.50),
displ_075 = quantile(displ, 0.75),
) %>%
# Reshape the data for plotting
pivot_longer(
cols = contains("displ"),
names_sep = "_",
names_to = c(".value", "quantile")
),
mapping = aes(yintercept = displ, color = quantile)
) +
geom_boxplot()
## TASK: Edit this code to reorder `class` according to `hwy`
mpg %>%
ggplot(aes(x = class, y = hwy)) +
geom_boxplot()
